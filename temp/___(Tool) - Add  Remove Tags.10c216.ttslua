function onload()
    makeButtons()
    TagsTo_Add = {'DiscardMe_SpecialCase'}
end

function setTagsToAdd()
    local z = {}
        local gm = splitString(self.getGMNotes())
        if gm[1] == nil then
            z = TagsTo_Add
        else
            for k, str in pairs(gm) do
                if string.find(string.lower(str), 'add:', 1, true) then
                    local line = str:gsub("%add:", "")
                    table.insert(z, line)
                end
            end
        end
    return z
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
function f_Top(obj, color, alt_click)
    --self.reload()
    local tAdd = setTagsToAdd()
    if not alt_click then
        Wait.frames(function() addTags_ADD(tAdd) end, 5)
    else
    end
end

function f_Bot(obj, color, alt_click)
    if not alt_click then
        removeTags_ALL()
    else
    end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
function addTags_ADD(tAdd)
    local decks = {}
    local allObjects = self.getData().ContainedObjects
    for k,v in pairs(allObjects) do
        local rot = Vector(v.Transform.rotX, v.Transform.rotY, v.Transform.rotZ)
        local o = self.takeObject()
        o.setLock(true)
        o.setPosition(self.getPosition()+Vector(0,-10,0))
        o.setRotation(rot)
        if o.type == 'Deck' then
            local deck = o
            deck.setRotation({0, 180, 180})
            for k,v in pairs(deck.getObjects()) do
                local c = o.takeObject()
                c.setLock(true)
                c.setRotation(rot)
                c.setPosition(self.getPosition()+Vector(0,-20,0))
                Wait.frames(function()
                    printToAll('CARD : '..c.getName(), 'Purple')
                    for k, tag in pairs(tAdd) do
                        printToAll('   Adding : '..tag, 'Yellow')
                        c.addTag(tag)
                    end
                    c.setLock(false)
                    c.setPosition(self.getPosition()+Vector(0,10,0))
                end, 5)
            end
        else
            Wait.frames(function()
                printToAll(o.getName(), 'Orange')
                for k, tag in pairs(tAdd) do
                    printToAll('   Adding : '..tag, 'Yellow')
                    o.addTag(tag)
                end
                o.setLock(false)
                self.putObject(o)
            end, 5)
        end
    end
end

function addTags_REPLACE(obj)
    print('NOTE WRITTEN')
end

function removeTags_NAME(obj)
    print('NOTE WRITTEN')
    --obj.removeTag(tag)
end

function removeTags_ALL()
    local allObjects = self.getData().ContainedObjects
    for k,v in pairs(allObjects) do
        local rot = Vector(v.Transform.rotX, v.Transform.rotY, v.Transform.rotZ)
        local o = self.takeObject()
        o.setLock(true)
        o.setPosition(self.getPosition()+Vector(0,-10,0))
        o.setRotation(rot)
        if o.type == 'Deck' then
            local deck = o
            deck.setRotation({0, 180, 180})
            for k,v in pairs(deck.getObjects()) do
                local c = o.takeObject()
                c.setLock(true)
                c.setRotation(rot)
                c.setPosition(self.getPosition()+Vector(0,-20,0))
                Wait.frames(function()
                    printToAll('CARD : '..c.getName(), 'Purple')
                    c.setTags({})
                    printToAll('   Removing ALL Tags', 'Red')
                    c.setLock(false)
                    c.setPosition(self.getPosition()+Vector(0,10,0))
                end, 5)
            end
        else
            Wait.frames(function()
                printToAll(o.getName(), 'Orange')
                printToAll('   Removing ALL Tags', 'Red')
                o.setTags({})
                o.setLock(false)
                self.putObject(o)
            end, 5)
        end
    end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
function splitString(str, b1, b2)
    local z = {}
        if not str then
            printToAll('splitString(str, sep, b1, b2) : Must Provide a string (at least)', 'Red')
        else
            -- split at NEW LINE
            if not b1 and not b2 then
                for s in str:gmatch("[^\r\n]+") do
                    table.insert(z, s)
                end
            else
            -- split at SEPERATOR
                if b1 and not b2 then
                    if b1 == '' then b1 = ' ' end
                    for s in string.gmatch(str, "([^"..'%'..b1.."]+)") do
                        table.insert(z, s)
                    end
            -- split Between
                elseif b1 and b2 then
                    for s in string.gmatch(str, '%'..b1..'(.-)%'..b2) do
                        table.insert(z, s)
                    end
                end
            end
        end
    return z
end

function zprint(var,title)
    if (type(var) == "table") then
        if title then
            print(logString(var,'\n-- '..title..' --'))
        else
            print(logString(var))
        end
    else
        if title then print('-- '..title..' --') end
        print(var)
    end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
function makeButtons()
    local lable = nil
    local ButtonList = {}; local lable = 'Add Tags\n(Right Click : Replace All)'; local min = 2500
            local button = {}
                    button.click_function = 'f_Top'
                    button.function_owner = self
                    button.position = {0,0.5,-2.2}
                    button.rotation = {0,180,0}
                    button.label =  lable
                    button.width = setDynamicButtonSizes_Width(lable, min)
                    button.height = setDynamicButtonSizes_Hight(lable)
                    button.font_size = 250
            table.insert(ButtonList, button)
            button = {}; lable = 'Remove ALL Tags\n(Right Click : Remove Named Tags)'
                    button.click_function = 'f_Bot'
                    button.function_owner = self
                    button.label = lable
                    --button.tooltip = 'Blessing'
                    button.position = {0,0.5,-3.7}
                    button.rotation = {0,180,0}
                    button.width = setDynamicButtonSizes_Width(lable, min) --2500
                    button.height = setDynamicButtonSizes_Hight(lable)
                    button.font_size = 250
            table.insert(ButtonList, button)

    for k, b in pairs (ButtonList) do
        self.createButton(b)
    end
end

function setDynamicButtonSizes_Hight(lable)
    local minHight = 450
    local lines = {}
    for line in lable:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end

    local count = #lines
    local adjust_hight = 126
    if count > 1 then
        for i=1, count, 1 do
            minHight = minHight + adjust_hight
        end
    end
    return minHight
end

function setDynamicButtonSizes_Width(str, minWidth)
    local lable = string.upper(str)--str:gsub("^%l", string.upper)
    local lableSize = #lable
    --print(lable)
    local adjust_Width = 100
    local widthBorder = 600
    local Width = 0

    local lines = {}
    for line in lable:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end

    local size = 0
    if lines[2] ~= nil then
        for _, line in pairs(lines) do
            if size < #line then size = #line end
        end
        lableSize = size
    end


    for i=1, lableSize, 1 do
        Width = Width + adjust_Width
    end
    Width = Width + widthBorder

    if Width < minWidth then
        Width = minWidth
    end
    return Width
end

--[[function setGlobalVariables()
TagsTo_Add = {}
TagsTo_Remove = {}
local gm = splitString(self.getGMNotes())

if gm == '' then
print('Blacnk')
TagsTo_Add = {'ID_CommonItem', 'DiscardType_Small'}
TagsTo_Remove = {}
else
for k, str in pairs(gm) do
if string.find(string.lower(str), 'add:', 1, true) then
local line = str:gsub("%add:", "")
table.insert(TagsTo_Add, line)

elseif string.find(string.lower(str), 'remove:', 1, true) then
local line = str:gsub("%remove:", "")
table.insert(TagsTo_Remove, line)
end
end
end
end]]