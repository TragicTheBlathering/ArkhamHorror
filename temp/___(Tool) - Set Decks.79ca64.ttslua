function onload()
    MakeButtons()
-- Run on Load for Testing
end

function SplitString(string, dem)
    local before, after = string.match(string, "(.*)%"..dem.."(.*)")
    local z = {name=name, before=before, after=after}
    return z
end

-- Add All the Changes in here!
function ChangeStuff(c)
    local name = c.getName()
    local description = c.getDescription()
    local gmNote = c.getGMNotes()
    c.use_grid = true
    c.tooltip = false

    local str = ''
    local n = ''
    if string.find(name, 'Southside') then
        c.setName('Southside Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Southside','DiscardMe_Large'})

    elseif string.find(name, 'Uptown') then
        c.setName('Uptown Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Uptown','DiscardMe_Large'})

    elseif string.find(name, 'French') then
        c.setName('French Hill Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_FrenchHill','DiscardMe_Large'})

    elseif string.find(name, 'Miskatonic University') then
        c.setName('Miskatonic University Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_MiskatonicUniversity','DiscardMe_Large'})

    elseif string.find(name, 'Rivertown') then
        c.setName('Rivertown Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Rivertown','DiscardMe_Large'})

    elseif string.find(name, 'Merchant District') then
        c.setName('Merchant District Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_MerchantDistrict','DiscardMe_Large'})

    elseif string.find(name, 'Easttown') then
        c.setName('Easttown Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Easttown','DiscardMe_Large'})

    elseif string.find(name, 'Downtown') then
        c.setName('Downtown Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Downtown','DiscardMe_Large'})

    elseif string.find(name, 'Northside') then
        c.setName('Northside Locations')
        str = string.gsub(c.getName(), " Locations", "")
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Northside','DiscardMe_Large'})

-- START SMALL CARDS -----------------------------------------------------------
    elseif string.find(description, 'Common') then
        n = string.gsub(name, '_', ' ')
        c.setName(n)
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_CommonItem','DiscardMe_Small'})

    elseif string.find(description, 'Spell') then
        n = string.gsub(name, '_', ' ')
        c.setName(n)
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Spell','DiscardMe_Small'})

    elseif string.find(description, 'Unique') then
        n = string.gsub(name, '_', ' ')
        c.setName(n)
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_UniqueItem','DiscardMe_Small'})

    elseif string.find(description, 'Skill') then
        n = string.gsub(name, '_', ' ')
        c.setName(n)
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Skill','DiscardMe_Small'})

    elseif string.find(description, 'Ally') then
        n = string.gsub(name, "_%(Allies%)", "")
        --c.addTag('Trash_')
        c.setName(n..' (Ally)')
        c.setDescription('')
        c.setGMNotes('')
        c.setTags({'ID_Ally','DiscardMe_Small'})
    end---END EDIT IF STATMENT
end

function b_function()
    local func_findDeck = function(o) return o.tag=="Deck" end
    local deckList = findInRadiusBy(self.getPosition(), 7.2, func_findDeck)
    if #deckList == 0 then
        broadcastToAll("ERROR: No deck found on device.", {0.9,0.2,0.2})
    else
        --print('GO!')
        self.clearButtons()
        spawnAllCards(deckList[1])
    end
end

function spawnAllCards(deck)
    function spawnAllCards_routine()
        deck.setLock(true)
        spawnedCardList = {}
        local pos = deck.getPosition()
        pos.y = pos.y + 1.75
        pos.y = pos.y + 0.2 * #deck.getObjects()
        for _ in ipairs(deck.getObjects()) do
            local drawnCard = deck.takeObject({
                position=pos,
                callback="spawnAllCards_callback",
                callback_owner=self
            })
            ChangeStuff(drawnCard)
            --drawnCard.setLock(true)
            --drawnCard.setDescription(self.getDescription())
            pos.y = pos.y - 0.2
            coroutine.yield(0)
        end

        wait(2)

        spawnedCardList = reverseTable(spawnedCardList)
        for _, card in ipairs(spawnedCardList) do
            card.setLock(false)
            coroutine.yield(0)
        end

        MakeButtons()
        return 1
    end
    startLuaCoroutine(self, 'spawnAllCards_routine')
end

--Callback, assigns each card to a table
function spawnAllCards_callback(card)
    table.insert(spawnedCardList, card)
end

--Coroutine delay, in seconds
function wait(time)
    local start = os.time()
    repeat coroutine.yield(0) until os.time() > start + time
end

--Reverses a table
function reverseTable(t)
    local reversedTable = {}
    local itemCount = #t
    for k, v in ipairs(t) do
        reversedTable[itemCount + 1 - k] = v
    end
    return reversedTable
end

--Finds objects in radius of a position, accepts optional filtering function
function findInRadiusBy(pos, radius, func, debug)
    local radius = (radius or 1)
    local objList = Physics.cast({
        origin=pos, direction={0,1,0}, type=3, size={radius,radius,radius},
        max_distance=0, debug=true--(debug or false)
    })

    local refinedList = {}
    for _, obj in ipairs(objList) do
        if func == nil then
            table.insert(refinedList, obj.hit_object)
        else
            if func(obj.hit_object) then
                table.insert(refinedList, obj.hit_object)
            end
        end
    end

    return refinedList
end

function MakeButtons()
    self.createButton({
        label="Fix Arkham Decks", tooltip="Copy Description to Cards",
        click_function="b_function", function_owner=self,
        position={0,0.6,9.5}, rotation={0,0,0}, height=450, width=2500,
        font_size=250, scale={2.5,2.5,2.5}--, color={0,0,0}, font_color={1,1,1}
    })
end