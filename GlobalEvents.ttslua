local tool = {}
      tool.waitForLastDropIntoBox=require("/_libs/WaitUtils/waitUtils").dropIntoBox
      tool.shuffleBag=require("/_libs/shuffleUtils/shuffleContainer").container
      tool.scaleBag=require("/_libs/scaleBags/scaleBags").fromContents
      tool.processTrash=require("/_libs/trashCan/trashCan").process

local dropTimer = 0.8

local GlobalEvents = {}
--------------------------------------------------------------------------------
--- onObjectEnter : CONTAINER --------------------------------------------------
function onObjectEnterContainer(bag, obj)
    -- Run Trash code, skip everythign else.
    if bag.hasTag('TrashCan') then
        tool.waitForLastDropIntoBox(bag, obj, tool.processTrash, dropTimer)
    else -- Run onObjectEnterExitContainer_Stack()... every Enter Event in this will be test for and run
        tool.waitForLastDropIntoBox(bag, obj, onObjectEnterExitContainer_Stack, dropTimer)
    end
end
--------------------------------------------------------------------------------
--- onObjectEnterExitContainer_Stack : CONTAINER -------------------------------
-- This will run a bunch of event tests after a SINLGE Droptest.
function onObjectEnterExitContainer_Stack(bag, obj)
    if bag.hasTag('ScaleBag') then
        tool.scaleBag(bag)
    end

    if bag.hasTag('ShuffleBag') or bag.hasTag('ShuffleBagRestricted') then
        tool.shuffleBag(bag)
    end
end
--******************************************************************************
--------------------------------------------------------------------------------
--- onObjectLeave : CONTAINER --------------------------------------------------
function onObjectLeaveContainer(bag, obj)
    tool.waitForLastDropIntoBox(bag, obj, onObjectEnterExitContainer_Stack, dropTimer)
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return GlobalEvents
